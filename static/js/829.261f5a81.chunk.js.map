{"version":3,"file":"static/js/829.261f5a81.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/src/useInView.tsx"],"sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_getPrototypeOf","getPrototypeOf","_typeof","obj","Symbol","iterator","constructor","prototype","_possibleConstructorReturn","self","call","TypeError","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","result","Super","NewTarget","this","arguments","apply","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","optionsToId","options","keys","sort","filter","map","root","has","set","toString","get","createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","children","InView","subClass","superClass","create","value","Constructor","protoProps","staticProps","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","as","React","useInView","setRef","current","entryTarget"],"sourceRoot":""}